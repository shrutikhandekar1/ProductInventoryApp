{"version":3,"sources":["Filters.js","ProductRow.js","ProductTable.js","ProductForm.js","Products.js","App.js","serviceWorker.js","index.js"],"names":["Filters","props","handleChange","bind","e","value","target","name","this","onFilter","type","className","placeholder","onChange","Component","ProductRow","destroy","productId","onDestroy","product","id","updateParent","category","price","instock","onClick","handleClick","ProductTable","handleDestroy","updateGrandparent","productsArray","Object","keys","products","map","pid","rows","forEach","indexOf","filterText","push","key","RESET_VALUES","ProductForm","handleUpdate","a","console","log","state","fetch","method","headers","body","JSON","stringify","handleSave","event","preventDefault","response","json","responseData","then","resp","data","newProductArray","p","_id","loadTable","setState","catch","err","assign","updateRow","enableUpdateBtn","errors","prevState","prevProps","inStockTrue","ref","input","required","inStockFalse","disabled","Products","index","findIndex","copyProducts","splice","updateTable","productToBeUpdated","handleFilter","loadData","filterInput","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e37d0dcb.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass Filters extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.handleChange = this.handleChange.bind(this)\r\n    }\r\n\r\n    handleChange(e) {\r\n        const value = e.target.value\r\n        const name = e.target.name\r\n\r\n        this.props.onFilter({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <form>\r\n                <input \r\n                    type=\"text\" \r\n                    className=\"form-control\" \r\n                    placeholder=\"Search...\" \r\n                    name=\"filterText\" \r\n                    onChange={this.handleChange}></input>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Filters","import React, { Component } from 'react'\r\n\r\nclass ProductRow extends Component {\r\n    destroy = (productId) => {\r\n        this.props.onDestroy(this.props.product.id);\r\n    }\r\n\r\n    handleClick() {\r\n        this.props.updateParent(this.props.product);\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <tr>\r\n                <td>{this.props.product.name}</td>\r\n                <td>{this.props.product.category}</td>\r\n                <td>${this.props.product.price}</td>\r\n                <td>{this.props.product.instock}</td>\r\n                <td ><button onClick={this.handleClick.bind(this)} className=\"btn btn-info\">Update</button></td>\r\n                <td><button onClick={() => this.destroy(this.props.product.id)} className=\"btn btn-info\">Delete</button></td>\r\n            </tr>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProductRow","import React, { Component } from 'react'\r\nimport ProductRow from './ProductRow'\r\n\r\nclass ProductTable extends Component {\r\n    handleDestroy =(id) => {\r\n        this.props.onDestroy(id)\r\n    }\r\n    \r\n    updateParent(value) {\r\n        this.props.updateGrandparent(value);\r\n    }\r\n\r\n    render () {\r\n\r\n        let productsArray = Object.keys(this.props.products).map((pid) => this.props.products[pid])\r\n        let rows = [];\r\n        productsArray.forEach((product) => {\r\n            if (product.name.indexOf(this.props.filterText) === -1) {\r\n                return\r\n            }\r\n            rows.push (\r\n                <ProductRow \r\n                    product={product} \r\n                    key={product.id} \r\n                    updateParent={this.updateParent.bind(this)} \r\n                    onDestroy={this.handleDestroy}></ProductRow>\r\n            )\r\n        })\r\n\r\n        return (\r\n            <div>\r\n                <table className=\"table table-striped table-sm\">\r\n                    <thead className=\"thead-dark\">\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>Category</th>\r\n                            <th>Price</th>\r\n                            <th>InStock</th>\r\n                            <th>&nbsp;Update</th>\r\n                            <th>&nbsp;Delete</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {rows}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProductTable","import React, { Component } from 'react';\r\n\r\nconst RESET_VALUES = {category: '', price: '', name: '', instock: false}\r\n\r\nclass ProductForm extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleUpdate = this.handleUpdate.bind(this)\r\n        this.handleSave = this.handleSave.bind(this)\r\n        \r\n        this.state = {\r\n            product: Object.assign({}, RESET_VALUES),\r\n            updateRow: '',\r\n            enableUpdateBtn: true,\r\n            errors: {}\r\n        }\r\n\r\n    }\r\n    \r\n\r\n\r\n    handleChange(e) {\r\n        const target = e.target\r\n        const value = target.value\r\n        const name = target.name\r\n        \r\n        this.setState((prevState) => {\r\n            prevState.product[name] = value\r\n            return { product: prevState.product }\r\n        })\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        //console.log('[componentDidUpdate]', prevState);\r\n        //console.log('[componentDidUpdate2]', prevProps);\r\n         if (this.props.updateRow !== '') {\r\n             if (this.state.enableUpdateBtn === true){\r\n                this.setState({enableUpdateBtn: false});\r\n             }\r\n            this.name.value = this.props.updateRow.name;\r\n            this.category.value = this.props.updateRow.category;\r\n            this.price.value = this.props.updateRow.price;\r\n \r\n            if(this.props.updateRow.instock===\"true\") {\r\n                this.inStockTrue.value = \"true\" } else {\r\n                    this.inStockTrue.value = 1;\r\n                }\r\n            \r\n            //update prevState to new values\r\n                //if(prevState.updateRow != this.prevState)\r\n         }\r\n         //console.log('[componentDidUpdate After]', prevState);\r\n         //console.log('[componentDidUpdate After]', this.state.prevState);\r\n      }\r\n\r\n\r\n    handleUpdate = async () => {\r\n        console.log(this.state.product);\r\n        try {\r\n            const response = await fetch('http://localhost:5000/products/update/'+ this.state.product.id, {\r\n              method: 'PATCH',\r\n              headers: {\r\n                'Content-Type': 'application/json'\r\n              },\r\n              body: JSON.stringify({\r\n                product: {\r\n                            category: this.state.product.category,\r\n                            price: this.state.product.price,\r\n                            name: this.state.product.name,\r\n                            instock: this.state.product.instock\r\n                        }\r\n              })\r\n\r\n            });\r\n        }catch (err) {\r\n            console.log(err);\r\n            }\r\n    } \r\n\r\n    handleSave = async event => {\r\n        event.preventDefault();\r\n        try {\r\n            const response = await fetch('http://localhost:5000/products/create', {\r\n              method: 'POST',\r\n              headers: {\r\n                'Content-Type': 'application/json'\r\n              },\r\n              body: JSON.stringify({\r\n                product: {\r\n                            category: this.state.product.category,\r\n                            price: this.state.product.price,\r\n                            name: this.state.product.name,\r\n                            instock: this.state.product.instock\r\n                        }\r\n              })\r\n\r\n            });\r\n    \r\n            const responseData = await response.json();\r\n            console.log(responseData);\r\n\r\n            fetch('http://localhost:5000/products/get')\r\n            .then((resp) => resp.json())\r\n            .then((data) => {\r\n                  let newProductArray = [];\r\n                data.map(p => {\r\n                    let {product,_id,} = p; //destructure object \r\n                    product.id = _id;\r\n                    newProductArray.push(product); //make array of product objects\r\n                    return null;\r\n                })\r\n                this.props.loadTable();\r\n                this.setState({product: RESET_VALUES});\r\n                })\r\n            .catch((err) => {\r\n            console.log(err)\r\n            })\r\n            .catch(function(err) {\r\n                console.log('Fetch Error :-S', err);\r\n            });\r\n          } catch (err) {\r\n            console.log(err);\r\n          }\r\n        }\r\n          \r\n      \r\n    render () {\r\n        return (\r\n            <form>\r\n                <h4>Add a new product</h4>\r\n                <p>\r\n                    <label>Name <br /> \r\n                    <input type=\"text\" className=\"form-control\" name=\"name\" onChange={this.handleChange}  ref={(input)=>{this.name = input}} value={this.state.product.name} required/></label>\r\n                </p>\r\n                <p>\r\n                    <label>Category <br /> \r\n                    <input type=\"text\" className=\"form-control\" name=\"category\" onChange={this.handleChange} ref={(input)=>{this.category = input}} value={this.state.product.category} required/></label>\r\n                </p>\r\n                <p>\r\n                    <label>Price <br /> \r\n                    <span className=\"form-control\" id=\"dollar-sign\">$</span><input type=\"text\" className=\"form-control\" name=\"price\" onChange={this.handleChange} ref={(input)=>{this.price = input}} value={this.state.product.price} required/>\r\n                    </label>\r\n                </p>\r\n                <p>Is product in Stock? </p>\r\n                    <input type=\"radio\"  name=\"instock\" onChange={this.handleChange} ref={(input)=>{this.inStockTrue = input}} value=\"true\" />True<br/>\r\n                    <input type=\"radio\"  name=\"instock\" onChange={this.handleChange} ref={(input)=>{this.inStockFalse = input}} value=\"false\" />False\r\n                <br/>\r\n                <button type=\"button\" className=\"btn btn-info\" onClick={this.handleUpdate}  disabled={this.state.enableUpdateBtn}>Update</button>\r\n                <input type=\"submit\" className=\"btn btn-info  ml-3\" value=\"Save\" onClick={this.handleSave}></input>\r\n                \r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProductForm","import React, { Component } from 'react'\r\nimport Filters from './Filters'\r\nimport ProductTable from './ProductTable'\r\nimport ProductForm from './ProductForm'\r\n\r\n\r\n// let PRODUCTS = {\r\n//     '1': {id: 1, category: 'Music', price: '$459.99', name: 'Clarinet', instock: true},\r\n//     '2': {id: 2, category: 'Music', price: '$5,000', name: 'Cello', instock: true},\r\n//     '3': {id: 3, category: 'Music', price: '$3,500', name: 'Tuba', instock: true},\r\n//     '4': {id: 4, category: 'Furniture', price: '$799', name: 'Chaise Lounge', instock: true},\r\n//     '5': {id: 5, category: 'Furniture', price: '$1,300', name: 'Dining Table', instock: true},\r\n//     '6': {id: 6, category: 'Furniture', price: '$100', name: 'Bean Bag', instock: true}\r\n// };\r\n\r\nclass Products extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            filterText: '',\r\n            products: '',\r\n            productToBeUpdated: ''\r\n        }\r\n        this.handleFilter = this.handleFilter.bind(this)\r\n        this.handleDestroy = this.handleDestroy.bind(this)\r\n        //this.handleUpdate = this.handleUpdate.bind(this)\r\n        this.loadData = this.loadData.bind(this)\r\n\r\n    }\r\n\r\n    updateGrandparent(value){\r\n        this.setState({productToBeUpdated: value});\r\n    }\r\n\r\n    handleDestroy = async (productId) => {\r\n        try {\r\n            const response = await fetch('http://localhost:5000/products/delete/' + productId, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                id: productId\r\n                })\r\n            });\r\n    \r\n            const responseData = await response.json();\r\n            console.log(responseData);\r\n\r\n            //Remove row from table\r\n            const index = this.state.products.findIndex(product => {\r\n                return product.id === productId;\r\n            });\r\n            console.log(index);\r\n             let copyProducts = [...this.state.products];\r\n             copyProducts.splice(index,1);\r\n  \r\n             this.setState({products:copyProducts});\r\n\r\n            } catch (err) {\r\n            console.log(err);\r\n            }\r\n        }\r\n        \r\n    componentDidMount() {\r\n        this.loadData();\r\n    }\r\n\r\n\r\n    loadData () {\r\n        fetch('http://localhost:5000/products/get')\r\n            .then((resp) => resp.json())\r\n            .then((data) => {\r\n                  let newProductArray = [];\r\n                data.map(p => {\r\n                    let {product,_id,} = p; //destructure object \r\n                    product.id = _id;\r\n                    newProductArray.push(product); //make array of product objects\r\n                    this.setState({products: newProductArray});\r\n                    return null;\r\n                })\r\n                })\r\n            .catch((err) => {\r\n            console.log(err)\r\n            })\r\n            .catch(function(err) {\r\n                console.log('Fetch Error :-S', err);\r\n            });\r\n       }\r\n\r\n    handleFilter(filterInput) {\r\n        this.setState(filterInput)\r\n    }\r\n\r\n    handleSave = async event => {\r\n        //console.log( this.state.product.category, this.state.product.instock);\r\n        event.preventDefault();\r\n        try {\r\n            const response = await fetch('http://localhost:5000/products/create', {\r\n              method: 'POST',\r\n              headers: {\r\n                'Content-Type': 'application/json'\r\n              },\r\n              body: JSON.stringify({\r\n                product: {\r\n                            category: this.state.product.category,\r\n                            price: this.state.product.price,\r\n                            name: this.state.product.name,\r\n                            instock: this.state.product.instock\r\n                        }\r\n              })\r\n\r\n            });\r\n    \r\n            const responseData = await response.json();\r\n            console.log(responseData);\r\n\r\n            fetch('http://localhost:5000/products/get')\r\n            .then((resp) => resp.json())\r\n            .then((data) => {\r\n                  let newProductArray = [];\r\n                data.map(p => {\r\n                    let {product,_id,} = p; //destructure object \r\n                    product.id = _id;\r\n                    newProductArray.push(product); //make array of product objects\r\n                    return null;\r\n                })\r\n                this.props.updateTable();\r\n                })\r\n            .catch((err) => {\r\n            console.log(err)\r\n            })\r\n            .catch(function(err) {\r\n                console.log('Fetch Error :-S', err);\r\n            });\r\n          } catch (err) {\r\n            console.log(err);\r\n          }\r\n        }\r\n          \r\n\r\n\r\n    render () {\r\n        return (\r\n            <div>\r\n                <h1>Product Inventory</h1>\r\n                <Filters \r\n                    onFilter={this.handleFilter}></Filters>\r\n                <ProductTable \r\n                    products={this.state.products}\r\n                    filterText={this.state.filterText}\r\n                    onDestroy ={this.handleDestroy}\r\n                    updateGrandparent={this.updateGrandparent.bind(this)} \r\n                    >\r\n                    </ProductTable>\r\n                <ProductForm\r\n                    loadTable={this.loadData}\r\n                    updateRow={this.state.productToBeUpdated}\r\n                ></ProductForm>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Products","import React from 'react';\nimport Products from './Products'\n\n\nfunction App() {\n  return (\n    <div>\n      <Products></Products>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}